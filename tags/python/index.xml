<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on 磊磊落落</title><link>https://leileiluoluo.github.io/tags/python/</link><description>Recent content in Python on 磊磊落落</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 10 May 2023 08:00:00 +0800</lastBuildDate><atom:link href="https://leileiluoluo.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Selenium 自动化测试最佳实践</title><link>https://leileiluoluo.github.io/posts/selenium-best-practices.html</link><pubDate>Wed, 10 May 2023 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/selenium-best-practices.html</guid><description>前两篇文章「Selenium WebDriver 基础使用」和「Selenium WebDriver 高级特性使用」分别介绍了 Selenium WebDriver 的基础功能和高级功能的使用。这两篇文章更多的是从底层实现细节的角度去练习 Selenium WebDriver API 的使用。</description></item><item><title>Selenium WebDriver 高级特性使用</title><link>https://leileiluoluo.github.io/posts/selenium-webdriver-advanced-features.html</link><pubDate>Mon, 24 Apr 2023 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/selenium-webdriver-advanced-features.html</guid><description>上文「Selenium WebDriver 基础使用」介绍了 Selenium WebDriver 基础功能的使用；本文将接着介绍 Selenium WebDriver 高级特性的使用，涉及页面加载策略、等待策略、元素定位与操作、浏览器操作。</description></item><item><title>Selenium WebDriver 基础使用</title><link>https://leileiluoluo.github.io/posts/selenium-webdriver.html</link><pubDate>Fri, 21 Apr 2023 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/selenium-webdriver.html</guid><description>「Selenium」是一个支持 Web 浏览器自动化的开源项目，可使用其来模拟用户与浏览器的一系列交互行为。
本文分两个部分：首先会介绍一下 Selenium 的组成部分；接着会使用一个实际的例子介绍 WebDriver 如何使用。</description></item><item><title>如何在 Flask 框架中使用 GitHub Auth 做授权登录？</title><link>https://leileiluoluo.github.io/posts/how-to-use-github-auth-in-flask.html</link><pubDate>Fri, 17 Mar 2023 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/how-to-use-github-auth-in-flask.html</guid><description>本文探讨如何在 Python Flask 框架中使用 GitHub Auth 做授权登录。即一个 Flask 应用，如何集成第三方的 GitHub 账号系统来做登录。</description></item><item><title>使用 PyMongo 封装一个易用的 MongoDB 工具类</title><link>https://leileiluoluo.github.io/posts/design-mongodb-util-using-pymongo.html</link><pubDate>Wed, 15 Feb 2023 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/design-mongodb-util-using-pymongo.html</guid><description>本文介绍在 Python 中如何使用 PyMongo 来封装一个简单易用的 MongoDB 工具类。</description></item><item><title>Selenium Grid 搭建及使用</title><link>https://leileiluoluo.github.io/posts/selenium-grid.html</link><pubDate>Tue, 30 Aug 2022 08:48:31 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/selenium-grid.html</guid><description>Selenium 测试的主要组成部分有：测试代码、WebDriver、Grid（Selenium Server，非必需）、浏览器驱动（Driver）和浏览器。
当我们编写完 Selenium 测试用例在本地调试时，WebDriver 通过浏览器驱动直接与浏览器进行交互。这时，WebDriver、浏览器驱动和浏览器位于同一主机。这种最基本的交互方式如下图所示。</description></item><item><title>感知机算法及 Python 实现</title><link>https://leileiluoluo.github.io/posts/perceptron-python-implementation.html</link><pubDate>Sun, 01 May 2022 10:59:05 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/perceptron-python-implementation.html</guid><description>1 何为感知机？ 感知机是一个单层人工神经网络，是一个用于二分类的算法，其也是线性分类器的一种。
其可被抽象为下图所示模型：即一个神经元接收到来自 n 个其它神经元的输入信号；对这些输入信号，通过带权值的连接进行计算（各个连接线的权值与对应输入值相乘，然后进行累加），然后判断计算出来的累加值是否超过阈值（Threshold）；若等于或超过阈值，则输出 y 为 1，表示该神经元激活，否则输出 y 为 -1 表示该神经元抑制。</description></item><item><title>LeetCode 105 以先序遍历及中序遍历构造二叉树</title><link>https://leileiluoluo.github.io/posts/leetcode-construct-binary-tree-from-preorder-and-inorder-traversal.html</link><pubDate>Tue, 06 Oct 2020 19:07:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/leetcode-construct-binary-tree-from-preorder-and-inorder-traversal.html</guid><description>1 题目描述 给定一棵二叉树的先序遍历及中序遍历，尝试构建该二叉树。
说明：
假定树中不存在值重复的情形 例如：</description></item><item><title>LeetCode 707 设计链表</title><link>https://leileiluoluo.github.io/posts/leetcode-design-linked-list.html</link><pubDate>Mon, 05 Oct 2020 12:09:28 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/leetcode-design-linked-list.html</guid><description>1 题目描述 设计链表的实现。您可以选择使用单链表或者双链表来实现。
单链表中的节点应有val和next两个属性，val为当前节点的值，next为下一个节点的指针或引用。
若使用双链表实现，则需要一个额外的属性prev来指向当前节点的前一个节点。</description></item><item><title>LeetCode 题目Golang实现汇总</title><link>https://leileiluoluo.github.io/leetcode-golang-implementations/</link><pubDate>Fri, 19 Jul 2019 00:01:14 +0000</pubDate><guid>https://leileiluoluo.github.io/leetcode-golang-implementations/</guid><description>GitHub: github.com/leileiluoluo/leetcode
题号 题目 难度 实现 2 Add Two Numbers 中 Golang 3 Longest Substring 中 Golang 5 Longest Palindromic Substring 中 Golang 6 ZigZag Conversion 中 Golang 8 String to Integer 中 Golang 12 Integer to Roman 中 Golang 17 Letter Combinations of A&amp;hellip; 中 Golang 19 Remove Nth Node From End of List 中 Golang 24 Swap Nodes In Pairs 中 Golang 33 Search in Rotated Sorted Array 中 Golang 34 Find First and Last Position… 中 Golang 48 Rotate Image 中 Golang 54 Spiral Matrix 中 Golang 55 Jump Game 中 Golang 56 Merge Intervals 中 Golang 59 Spiral Matrix II 中 Golang 60 Permutation Sequence 中 Golang 61 Rotate List 中 Golang 71 Simplify Path 中 Golang 73 Set Matrix Zeroes 中 Golang 74 Search a 2D Matrix 中 Golang 75 Sort Colors 中 Golang 77 Combinations 中 Golang 81 Search in Rotated Sorted Array II 中 Golang 86 Partition List 中 Golang 91 Decode Ways 中 Golang 92 Reverse Linked List II 中 Golang 93 Restore IP Addresses 中 Golang 94 Binary Tree Inorder Traversal 中 Golang 95 Unique Binary Search Trees II 中 Golang 96 Unique Binary Search Trees 中 Golang 98 Validate Binary Search Tree 中 Golang 102 Binary Tree Level Order Traversal 中 Golang 103 Binary Tree Zigzag Level Order Traversal 中 Golang 105 Construct Binary Tree from Preorder&amp;hellip; 中 Golang, Python 106 Construct Binary Tree from Inorder&amp;hellip; 中 Golang 130 Surrounded Regions 中 Golang 143 Reorder List 中 Golang 144 Binary Tree Preorder Traversal 中 Golang 145 Binary Tree Postorder Traversal 难 Golang 151 Reverse Words in a String 中 Golang 165 Compare Version Numbers 中 Golang 198 House Robber 易 Golang 199 Binary Tree Right Side View 中 Golang 206 Reverse Linked List 易 Golang 224 Basic Calculator 难 Golang 338 Couting Bits 中 Golang 355 Design Twitter 中 Golang 393 UTF-8 Validation 中 Golang 413 Arithmetic Slices 中 Golang 451 Sort Characters By Frequency 中 Golang 477 Total Hamming Distance 中 Golang 508 Most Frequent Subtree Sum 中 Golang 513 Find Bottom Left Tree Value 中 Golang 515 Find Largest Value in Each Tree Row 中 Golang 641 Design Circular Deque 中 Golang 701 Insert into a Binary Search Tree 中 Golang 707 Design Linked List 中 Golang, Python 807 Max Increase to Keep City&amp;hellip; 中 Golang 856 Score of Parentheses 中 Golang 885 Spiral Matrix III 中 Golang 889 Construct Binary Tree from&amp;hellip; 中 Golang 911 Online Election 中 Golang 946 Validate Stack Sequences 中 Golang 958 Check Completeness of a Binary Tree 中 Golang 981 Time Based Key-Value Store 中 Golang 1008 Construct Binary Search Tree&amp;hellip; 中 Golang</description></item><item><title>k-d tree算法原理及实现</title><link>https://leileiluoluo.github.io/posts/kdtree-algorithm-and-implementation.html</link><pubDate>Thu, 28 Dec 2017 14:58:11 +0000</pubDate><guid>https://leileiluoluo.github.io/posts/kdtree-algorithm-and-implementation.html</guid><description>k-d tree即k-dimensional tree，常用来作空间划分及近邻搜索，是二叉空间划分树的一个特例。通常，对于维度为$k$，数据点数为$N$的数据集，k-d tree适用于$N\gg2^k$的情形。
1）k-d tree算法原理</description></item><item><title>手机品牌搜索走势图</title><link>https://leileiluoluo.github.io/posts/search-trends-of-mobile-phone-brands.html</link><pubDate>Tue, 28 Nov 2017 13:42:49 +0000</pubDate><guid>https://leileiluoluo.github.io/posts/search-trends-of-mobile-phone-brands.html</guid><description>当前，各应用平台每天都在产生海量的数据。基于海量数据的深度分析报告越来越有价值。该领域涵盖数学、统计学，计算机科学等众多学科，是一个值得深入研究的方向。本文涉及的是一个简单的数据分析场景，旨在梳理使用Python数据分析涉及的常用类库（pandas、matplotlib等）与入门知识。本文对指定的几家手机品牌，按日期区间，从百度指数网站获取其月度搜索数据，然后绘制出它们的搜索走势对比图。
1）关键点
a）日期区间（使用pandas的date_range方法）；
b）对指定日期（年月），获取手机品牌清单中各品牌的搜索量（requests使用）；
c）构造DataFrame（重点关注data、index和columns参数传值），结合matplotlib绘图。</description></item></channel></rss>