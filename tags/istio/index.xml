<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Istio on 磊磊落落</title><link>https://leileiluoluo.com/tags/istio/</link><description>Recent content in Istio on 磊磊落落</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>leileiluoluo@leileiluoluo.com (磊磊落落)</managingEditor><webMaster>leileiluoluo@leileiluoluo.com (磊磊落落)</webMaster><lastBuildDate>Sun, 10 Jan 2021 18:27:31 +0800</lastBuildDate><atom:link href="https://leileiluoluo.com/tags/istio/index.xml" rel="self" type="application/rss+xml"/><item><title>Istio 证书管理之植入 CA 证书</title><link>https://leileiluoluo.com/posts/istio-plug-in-ca-certificates.html</link><pubDate>Sun, 10 Jan 2021 18:27:31 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://leileiluoluo.com/posts/istio-plug-in-ca-certificates.html</guid><description>本文介绍管理员如何使用根证书、签发证书及秘钥为 Istio 配置 CA（证书颁发机构）。Istio CA 使用由中间 CA 签发的私钥及证书，而中间 CA 由根 CA 签发。这样，Istio CA 即可为工作负载签发根证书及私钥。CA 层次结构图如下。</description></item><item><title>Istio 流量管理之安全 Gateway</title><link>https://leileiluoluo.com/posts/istio-secure-gateways.html</link><pubDate>Sat, 02 Jan 2021 08:29:44 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://leileiluoluo.com/posts/istio-secure-gateways.html</guid><description>上文“Istio 流量管理之 Ingress Gateway”介绍了如何使用 Gateway 将一个 7 层 HTTP 服务暴露给外部使用。本文将介绍如何为 Gateway 配置单向或双向 TLS 从而暴露一个安全的 HTTPS 服务给外部访问。关于 Istio 安装等环境准备，请参阅“Istio 安装使用”。</description></item><item><title>Istio 流量管理之 Ingress Gateway</title><link>https://leileiluoluo.com/posts/istio-ingress-gateways.html</link><pubDate>Fri, 01 Jan 2021 08:07:25 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://leileiluoluo.com/posts/istio-ingress-gateways.html</guid><description>Istio Ingress Gateway 是允许外部流量进入 Istio 服务网格的边缘服务。其比 Kubernetes Ingress 更具扩展性。且使用 Istio Ingress Gateway，使得 Istio 对于入口流量同样具有策略控制能力及可观察性。</description></item><item><title>Istio 流量管理之流量镜像</title><link>https://leileiluoluo.com/posts/istio-mirroring.html</link><pubDate>Tue, 29 Dec 2020 14:06:34 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://leileiluoluo.com/posts/istio-mirroring.html</guid><description>本文介绍一下 Istio 的流量镜像功能，即使用 Istio 可以将某一服务的实时流量拷贝一份并镜像到另一个服务。该特性对线上调试特别有用。</description></item><item><title>Istio 流量管理之熔断</title><link>https://leileiluoluo.com/posts/istio-circuit-breaking.html</link><pubDate>Mon, 28 Dec 2020 08:23:19 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://leileiluoluo.com/posts/istio-circuit-breaking.html</guid><description>熔断是创建弹性微服务应用的重要特性，使用熔断可以对并发连接太多，请求过频等做出主动防御，避免服务链条因单一故障问题而出现雪崩效应。
因熔断设置针对的是具体的目标主机，所以 Istio 使用 Destination Rule 来进行配置。</description></item><item><title>Istio 流量管理之请求超时</title><link>https://leileiluoluo.com/posts/istio-request-timeouts.html</link><pubDate>Sun, 27 Dec 2020 16:41:03 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://leileiluoluo.com/posts/istio-request-timeouts.html</guid><description>可以使用 Istio 在路由中设置请求超时时间。下面使用 Bookinfo 样例测试一下。</description></item><item><title>Istio 流量管理之 TCP 流量转移</title><link>https://leileiluoluo.com/posts/istio-tcp-traffic-shifting.html</link><pubDate>Sat, 26 Dec 2020 08:48:52 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://leileiluoluo.com/posts/istio-tcp-traffic-shifting.html</guid><description>在上文“Istio 流量管理之流量转移”中，我们使用 Istio 为 7 层 HTTP 应用作了流量按比例分配测试。本文使用 Istio 自带的 tcp-echo 样例对 4 层 TCP 应用作一下测试。</description></item><item><title>Istio 流量管理之流量转移</title><link>https://leileiluoluo.com/posts/istio-traffic-shifting.html</link><pubDate>Fri, 25 Dec 2020 07:16:55 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://leileiluoluo.com/posts/istio-traffic-shifting.html</guid><description>在日常的持续部署中，我们一般使用滚动升级的方式来进行微服务升级。若使用 Kubernetes 容器编排平台进行微服务滚动升级，其一般通过控制实例数的方式来实现。将旧版本下线，将新版本启动，新实例健康检查通过后，统一将流量打到新版本。
而使用 Istio，不用控制实例数，且可以更细粒度的控制流量打到各个版本的百分比，从而实现按比例将流量逐渐迁移到新版本来实现升级。</description></item><item><title>Istio 流量管理之故障注入</title><link>https://leileiluoluo.com/posts/istio-fault-injection.html</link><pubDate>Wed, 23 Dec 2020 10:04:19 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://leileiluoluo.com/posts/istio-fault-injection.html</guid><description>在微服务架构中，若一个服务不可用，会不会导致调用其 API 的上游服务也不可用，上游服务有没有针对该种情形做容错处理，这对应用的整体可用性来说是很关键的。Istio 可以在对微服务无侵入的情况下来模拟其发生故障，以帮助我们测试应用整体的容错能力。
Istio 主要使用 Virtual Service 提供两种故障注入能力：响应延迟与服务中止。</description></item><item><title>Istio 流量管理之请求路由</title><link>https://leileiluoluo.com/posts/istio-request-routing.html</link><pubDate>Mon, 21 Dec 2020 08:37:43 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://leileiluoluo.com/posts/istio-request-routing.html</guid><description>在上文“Istio 安装使用”中，我们对 Istio 进行了安装，并对 Bookinfo 样例进行了部署测试。本文接着上文，对 Istio 流量管理中的请求路由进行概念学习及样例测试。</description></item><item><title>Istio 安装使用</title><link>https://leileiluoluo.com/posts/istio-get-started.html</link><pubDate>Wed, 16 Dec 2020 07:48:56 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://leileiluoluo.com/posts/istio-get-started.html</guid><description>本文所使用的操作系统为 macOS 11.1，使用 Docker Desktop 3.</description></item><item><title>为什么 Istio 重回单体架构？</title><link>https://leileiluoluo.com/posts/why-istio-back-to-monolithic-architecture.html</link><pubDate>Wed, 09 Dec 2020 17:52:16 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://leileiluoluo.com/posts/why-istio-back-to-monolithic-architecture.html</guid><description>随着应用规模的不断扩大，单体架构已不能承载企业越来越多的业务需求，微服务架构随之兴起。微服务给我们带来诸多益处的同时也带来诸多挑战，其根源即是复杂性的提升。为了解决微服务带来的诸多问题，其中便催生了服务网格的流行。但2020年初，业内最知名的服务网格实现Istio却反其道而行之，由微服务架构重回单体架构，其原因是什么呢？可能是一个契机，让我们重新审思微服务架构带来的好处及问题。
1 微服务架构有什么优势？ 将一个复杂的单体应用切分为按领域细分的微服务后，可以让团队聚焦所关注的领域，做到相互独立，彼此不受影响。其带来的优势主要有：
彼此独立交付，快速迭代 各自解耦的微服务，可以让彼此间有明确的边界，各自可以采用不同的语言或技术栈，基于轻量协议（HTTP，RPC等）进行交互。每个微服务可以拥有自己的生命周期，无须相互协调或等待，做到彼此独立交付，相互不受影响。因粒度小，迭代快，从总体看，可以做到并行开发，流水线式产出。</description></item><item><title>Istio 流量管理初探</title><link>https://leileiluoluo.com/posts/istio-traffic-management.html</link><pubDate>Tue, 21 Apr 2020 08:43:50 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://leileiluoluo.com/posts/istio-traffic-management.html</guid><description>Istio 使用 Envoy 来代理网格服务的所有进出流量，可在不改变服务代码的情况下自由进行流量控制。 使用 Istio，诸如熔断处理，服务超时，重试等服务级特性，通过简单的几行配置即可实现；同时，诸如 A/B 测试，灰度发布，按比例滚动升级等重要任务亦可以很容易实现。</description></item><item><title>Istio 是什么？</title><link>https://leileiluoluo.com/posts/what-is-istio.html</link><pubDate>Sun, 08 Mar 2020 07:53:30 +0000</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://leileiluoluo.com/posts/what-is-istio.html</guid><description>云平台给我们带来大量好处的同时也给 DevOps 团队带来很多负担。开发使用微服务来架构，与此同时，运维需要管理超多环境及超复杂的部署。
Istio 即是为解放微服务带来的复杂性而生，其是一个开源的服务网格，可以与现有分布式应用无缝集成。以便为您的分布式微服务架构提供一个统一的方式来连接、管理，保护及监控微服务。</description></item></channel></rss>