<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>云原生 on 磊磊落落</title><link>https://olzhy.github.io/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/</link><description>Recent content in 云原生 on 磊磊落落</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>leileiluoluo@leileiluoluo.com (磊磊落落)</managingEditor><webMaster>leileiluoluo@leileiluoluo.com (磊磊落落)</webMaster><lastBuildDate>Mon, 29 May 2023 08:00:00 +0800</lastBuildDate><atom:link href="https://olzhy.github.io/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 Docker 构建安全镜像的几个最佳实践</title><link>https://olzhy.github.io/posts/docker-security-best-practices.html</link><pubDate>Mon, 29 May 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/docker-security-best-practices.html</guid><description>前两篇文章「Docker 初探」与「使用 Docker 的几个最佳实践」分别介绍了 Docker 的基本概念与使用方法，以及 Docker 在基础使用上的几个最佳实践。本文接着介绍一下 Docker 在构建安全镜像上的几个最佳实践。</description></item><item><title>使用 Docker 的几个最佳实践</title><link>https://olzhy.github.io/posts/docker-development-best-practices.html</link><pubDate>Sun, 28 May 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/docker-development-best-practices.html</guid><description>上文「Docker 初探」介绍了 Docker 的基本概念与使用方法，本文接着介绍使用 Docker 的几个最佳实践。</description></item><item><title>Docker 初探</title><link>https://olzhy.github.io/posts/docker-getting-started.html</link><pubDate>Sun, 21 May 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/docker-getting-started.html</guid><description>上文「一文了解什么是容器」介绍了容器的基本概念，本文接着介绍当前最流行的容器平台 Docker，并对其进行初步使用。
1 Docker 概览 Docker 是一个用于开发、发布和运行应用程序的开放容器平台。Docker 能够将应用程序与基础架构分离，以便快速交付软件。使用 Docker，我们可以像管理应用程序一样管理基础架构。通过利用 Docker 快速发布、测试与部署代码的方法，我们能够显著提升编写代码与在生产环境运行代码的效率。</description></item><item><title>一文了解什么是容器</title><link>https://olzhy.github.io/posts/what-is-a-container.html</link><pubDate>Wed, 17 May 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/what-is-a-container.html</guid><description>正如运输行业使用集装箱作为标准单元来包装货物以快速装卸与运输一样，软件行业也在越来越多的使用容器作为标准单元来打包应用程序以简化应用程序的迁移。
（现实生活中的集装箱 - 引用自 Ridge Cloud） 所以容器到底是什么呢？容器就是一个将软件代码和其所有依赖项打包在一起的标准单元。使用容器后，运行在一个计算环境的应用程序，可以快速可靠的运行在另一个计算环境上。</description></item><item><title>容器引擎 Podman 初探</title><link>https://olzhy.github.io/posts/podman-getting-started.html</link><pubDate>Tue, 07 Sep 2021 14:59:12 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/podman-getting-started.html</guid><description>Podman，即 Pod Manager 的缩写，是一个无守护进程容器引擎，用于在 Linux 系统上开发、管理及运行 OCI 容器。</description></item><item><title>Kubernetes 概览</title><link>https://olzhy.github.io/posts/kubernetes-introduction.html</link><pubDate>Sun, 01 Mar 2020 00:51:33 +0000</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/kubernetes-introduction.html</guid><description>Kubernetes 是一个开源的容器编排系统。支持将应用的部署、扩展及管理自动化。其设计思路深受谷歌 Borg 系统的影响。
Kubernetes 定义了一组构建块，提供了基于 CPU，内存及自定义指标来部署，维护及扩展应用的机制。Kubernetes 是松耦合的且可对不同的工作载荷进行扩展。其扩展性绝大部分是通过 Kubernetes API 来实现的。</description></item></channel></rss>