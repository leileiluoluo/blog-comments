<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>设计模式 on 磊磊落落</title><link>https://olzhy.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><description>Recent content in 设计模式 on 磊磊落落</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 24 Mar 2024 08:00:00 +0800</lastBuildDate><atom:link href="https://olzhy.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>深入理解 Java 中的单例模式</title><link>https://olzhy.github.io/posts/singleton-pattern-in-java.html</link><pubDate>Sun, 24 Mar 2024 08:00:00 +0800</pubDate><guid>https://olzhy.github.io/posts/singleton-pattern-in-java.html</guid><description>Java 中的单例是指一个类在全局只有一个实例。
实现一个单例通常需要将类的构造器变为私有，并提供一个获取实例的静态工厂方法。
public class Singleton { private static Singleton INSTANCE; private Singleton() { } public static Singleton getInstance() { if (null == INSTANCE) { INSTANCE = new Singleton(); } return INSTANCE; } } 参考资料</description></item></channel></rss>