<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>设计模式 on 磊磊落落</title><link>https://olzhy.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><description>Recent content in 设计模式 on 磊磊落落</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 24 Mar 2024 08:00:00 +0800</lastBuildDate><atom:link href="https://olzhy.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>深入理解 Java 中的单例模式</title><link>https://olzhy.github.io/posts/singleton-pattern-in-java.html</link><pubDate>Sun, 24 Mar 2024 08:00:00 +0800</pubDate><guid>https://olzhy.github.io/posts/singleton-pattern-in-java.html</guid><description>&lt;p>Java 中的单例类是指一个类在 JVM（Java Virtual Machine，Java 虚拟机）中只存在一个实例，并且该类可以对外提供一个获取实例的全局访问点。&lt;/p>
&lt;p>单例类的主要用途是确保在整个应用程序中只有一个实例存在，从而方便对共享资源、全局状态和单一功能的管理。我们有一些常用的 JDK 类就是单例类，如：&lt;code>java.lang.Runtime&lt;/code>、&lt;code>java.lang.System&lt;/code> 与 &lt;code>java.sql.DriverManager&lt;/code> 等。&lt;/p>
&lt;p>本文将罗列实现单例类的几种方式，并分析它们的优缺点。&lt;/p></description></item><item><title>Java 建造者模式（Builder Pattern）知多少？</title><link>https://olzhy.github.io/posts/java-builder-pattern.html</link><pubDate>Tue, 05 Dec 2023 08:00:00 +0800</pubDate><guid>https://olzhy.github.io/posts/java-builder-pattern.html</guid><description>因 Java 中没有命名参数的概念，当一个类的构造器可选参数太多的时候，代码可读性会变得很差。于是，建造者模式（Builder Pattern）应运而生。
本文首先举了一个真实的例子，引出构造器可选参数太多时应如何去处理的问题。然后，分析传统的伸缩式构造器模式与 JavaBeans 构造器模式在处理该问题时存在的不足；最后，引出了建造者模式，介绍了其设计思路与优点。</description></item></channel></rss>