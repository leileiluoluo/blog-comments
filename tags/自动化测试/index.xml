<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>自动化测试 on 磊磊落落</title><link>https://leileiluoluo.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</link><description>Recent content in 自动化测试 on 磊磊落落</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 17 Jun 2024 14:00:00 +0800</lastBuildDate><atom:link href="https://leileiluoluo.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/index.xml" rel="self" type="application/rss+xml"/><item><title>如何使用 Screenplay 模式编写 UI 测试用例？</title><link>https://leileiluoluo.github.io/posts/how-to-write-ui-test-cases-using-screenplay-pattern.html</link><pubDate>Mon, 17 Jun 2024 14:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/how-to-write-ui-test-cases-using-screenplay-pattern.html</guid><description>&lt;p>Screenplay 模式是一个用于软件测试的设计模式，本文探索如何使用 Screenplay 模式编写 Web UI 测试用例？&lt;/p>
&lt;p>本文首先会介绍 Screenplay 模式的基本概念；接着，以登录 GitHub 并在页面创建 Issue 为测试场景，来分析该场景中的操作者与行为分别对应 Screenplay 模式中的哪个部分；最后，针对该测试场景，使用 Serenity BDD 测试框架来编写满足 Screenplay 模式的测试用例。&lt;/p></description></item><item><title>如何使用 Serenity BDD 进行 UI 测试？</title><link>https://leileiluoluo.github.io/posts/how-to-perform-ui-testing-using-serenity-bdd.html</link><pubDate>Wed, 12 Jun 2024 17:50:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/how-to-perform-ui-testing-using-serenity-bdd.html</guid><description>Serenity BDD（Behavior Driven Development，行为驱动开发）是一个支持 Java 语言的 BDD 自动化测试框架。Serenity BDD 框架功能强大，吸纳了业界诸多通用测试规范，支持页面对象模型（Page Object Model），可与 JUnit、Cucumber、Selenium、JBehave 等多种流行测试框架进行集成。此外，Serenity BDD 还提供详细的测试报告，可以直观呈现每个步骤的执行结果、页面截图、耗时情况，以及整体测试覆盖率等各项数据与指标。</description></item><item><title>Cucumber Java 如何与 Spring Boot 进行集成？</title><link>https://leileiluoluo.github.io/posts/cucumber-java-spring-boot-integration.html</link><pubDate>Sun, 02 Jun 2024 14:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/cucumber-java-spring-boot-integration.html</guid><description>前面我们在「如何使用 Cucumber Java 进行 UI 测试？」一文中，以登录 GitHub 并在页面创建 Issue 为例介绍了 Cucumber 与 Selenium 的集成，但其中的示例工程未使用依赖注入工具，所有对象的新建均是使用原生 new 关键字来实现的。接着，我们在上文「如何在 Cucumber Java 中使用 PicoContainer 进行依赖注入？」介绍了在 Cucumber 中使用 PicoContainer 进行依赖注入的方法。尽管 PicoContainer 比较轻量，也是 Cucumber 官方推荐的依赖注入工具，但在 Java 技术栈，Spring 或 Spring Boot 框架才是主流，除了提供依赖注入功能外，其还提供诸多其它实用功能（如灵活的配置、方便的数据库连接、易用的组件集成方法等），所以探索 Cucumber 与 Spring Boot 的集成很有必要。本文即接着前面的两篇文章，同样以登录 GitHub 并在页面创建 Issue 为测试场景，以示例工程的方式演示 Cucumber 与 Spring Boot 的集成，示例工程实现语言为 Java，使用的浏览器测试工具为 Selenium，工程使用 Maven 管理。</description></item><item><title>如何在 Cucumber Java 中使用 PicoContainer 进行依赖注入？</title><link>https://leileiluoluo.github.io/posts/cucumber-java-dependency-injection-using-picocontainer.html</link><pubDate>Fri, 31 May 2024 16:50:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/cucumber-java-dependency-injection-using-picocontainer.html</guid><description>上文「如何使用 Cucumber Java 进行 UI 测试？」以登录 GitHub 并在页面上创建 Issue 为例演示了 Cucumber Java 与 Selenium 的集成，以及 UI 测试工程的搭建及测试用例的编写。您可能注意到，上文演示的测试工程未使用依赖注入工具，对象的创建均是使用最原生的 new 方式来实现的。这对于大型工程来说，会显得非常笨拙。本文主要介绍 Cucumber Java 与依赖注入框架 PicoContainer 的集成，本文将对上文的测试工程进行改造，将所有手动创建对象的地方都交由 PicoContainer 来自动实现。</description></item><item><title>如何使用 Cucumber Java 进行 UI 测试？</title><link>https://leileiluoluo.github.io/posts/how-to-perform-ui-testing-using-cucumber.html</link><pubDate>Wed, 22 May 2024 17:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/how-to-perform-ui-testing-using-cucumber.html</guid><description>上文「Cucumber 是什么？如何使用 Cucumber Java 进行 API 测试？」介绍了 Cucumber 中的基本概念，并以实例的方式演示了如何使用 Cucumber Java 进行 API 测试。本文基于此，以在页面创建 GitHub Issue 为例进一步探索如何使用 Cucumber Java 进行 UI（浏览器）测试。示例工程实现语言为 Java，使用的浏览器测试工具为 Selenium，工程使用 Maven 管理。</description></item><item><title>Cucumber 是什么？如何使用 Cucumber Java 进行 API 测试？</title><link>https://leileiluoluo.github.io/posts/cucumber-introduction.html</link><pubDate>Sat, 18 May 2024 18:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/cucumber-introduction.html</guid><description>Cucumber 是一个支持 BDD（Behaviour-Driven Development，行为驱动开发）的自动化测试工具。
本文首先会对 BDD 进行介绍，接着对 Cucumber 中用到的概念进行介绍，最后以样例的方式演示如何使用 Cucumber Java 进行 API 测试。</description></item><item><title>如何使用 REST Assured 做 API 测试？</title><link>https://leileiluoluo.github.io/posts/how-to-perform-api-testing-using-rest-assured.html</link><pubDate>Sat, 23 Dec 2023 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/how-to-perform-api-testing-using-rest-assured.html</guid><description>REST Assured 是一个用于测试 RESTful API 的 Java 类库，其提供一种简单又直观的 DSL（Domain-Specific Language，领域特定语言）来编写测试用例。REST Assured 支持常见的 HTTP 请求方法（如：GET、POST、PUT、DELETE、PATCH、OPTIONS 等），且可以很方便的与 TestNG、JUnit、Cucumber 等流行测试框架进行集成。</description></item><item><title>在 VS Code 中使用 REST Client 扩展做 API 测试</title><link>https://leileiluoluo.github.io/posts/getting-started-with-vscode-extension-rest-client.html</link><pubDate>Thu, 05 Oct 2023 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/getting-started-with-vscode-extension-rest-client.html</guid><description>VS Code 中有一个非常易用的、用于 API 测试的扩展，名为 REST Client。可以在 VS Code 中使用该扩展来发送 HTTP 请求及接收响应，其语法比 cURL 命令更简单，是我们开发人员在测试 API 时的一个不错的选择。</description></item><item><title>Selenium 自动化测试最佳实践</title><link>https://leileiluoluo.github.io/posts/selenium-best-practices.html</link><pubDate>Wed, 10 May 2023 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/selenium-best-practices.html</guid><description>前两篇文章「Selenium WebDriver 基础使用」和「Selenium WebDriver 高级特性使用」分别介绍了 Selenium WebDriver 的基础功能和高级功能的使用。这两篇文章更多的是从底层实现细节的角度去练习 Selenium WebDriver API 的使用。</description></item><item><title>Selenium WebDriver 高级特性使用</title><link>https://leileiluoluo.github.io/posts/selenium-webdriver-advanced-features.html</link><pubDate>Mon, 24 Apr 2023 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/selenium-webdriver-advanced-features.html</guid><description>上文「Selenium WebDriver 基础使用」介绍了 Selenium WebDriver 基础功能的使用；本文将接着介绍 Selenium WebDriver 高级特性的使用，涉及页面加载策略、等待策略、元素定位与操作、浏览器操作。</description></item><item><title>Selenium WebDriver 基础使用</title><link>https://leileiluoluo.github.io/posts/selenium-webdriver.html</link><pubDate>Fri, 21 Apr 2023 08:00:00 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/selenium-webdriver.html</guid><description>「Selenium」是一个支持 Web 浏览器自动化的开源项目，可使用其来模拟用户与浏览器的一系列交互行为。
本文分两个部分：首先会介绍一下 Selenium 的组成部分；接着会使用一个实际的例子介绍 WebDriver 如何使用。</description></item><item><title>Selenium Grid 搭建及使用</title><link>https://leileiluoluo.github.io/posts/selenium-grid.html</link><pubDate>Tue, 30 Aug 2022 08:48:31 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/selenium-grid.html</guid><description>Selenium 测试的主要组成部分有：测试代码、WebDriver、Grid（Selenium Server，非必需）、浏览器驱动（Driver）和浏览器。
当我们编写完 Selenium 测试用例在本地调试时，WebDriver 通过浏览器驱动直接与浏览器进行交互。这时，WebDriver、浏览器驱动和浏览器位于同一主机。这种最基本的交互方式如下图所示。</description></item><item><title>Apache JMeter 初探</title><link>https://leileiluoluo.github.io/posts/apache-jmeter-introduction.html</link><pubDate>Wed, 27 Jul 2022 14:13:31 +0800</pubDate><guid>https://leileiluoluo.github.io/posts/apache-jmeter-introduction.html</guid><description>Apache JMeter 是一个使用纯 Java 编写的、由 Apache 软件基金会开源的、用于度量软件性能的负载测试工具。</description></item><item><title>Golang 使用 Selenium 实现自动化测试初探</title><link>https://leileiluoluo.github.io/posts/golang-selenium.html</link><pubDate>Sat, 14 Mar 2020 00:00:16 +0000</pubDate><guid>https://leileiluoluo.github.io/posts/golang-selenium.html</guid><description>Selenium 整合了一揽子工具与依赖库，支持 Web 浏览器自动化，提供一组扩展来模拟人与浏览器交互。我们基于其满足 W3C 标准的 WebDriver 来编写的自动化代码可在各种主流浏览器复用。</description></item></channel></rss>