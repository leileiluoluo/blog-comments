<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>计算机 on 磊磊落落</title><link>https://olzhy.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/</link><description>Recent content in 计算机 on 磊磊落落</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>leileiluoluo@leileiluoluo.com (磊磊落落)</managingEditor><webMaster>leileiluoluo@leileiluoluo.com (磊磊落落)</webMaster><lastBuildDate>Fri, 20 Oct 2023 08:00:00 +0800</lastBuildDate><atom:link href="https://olzhy.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/index.xml" rel="self" type="application/rss+xml"/><item><title>PostgreSQL 表继承使用详解</title><link>https://olzhy.github.io/posts/postgres-table-inheritance.html</link><pubDate>Fri, 20 Oct 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/postgres-table-inheritance.html</guid><description>继承是来自于面向对象数据库的概念，其为数据库设计带来了新的可能性。
先看一个例子：假定我们正在构建一个数据模型来存储所有的城市，而城市中有的是普通城市，有的是省会城市，如何进行表设计呢？继承特性就能很巧妙的表示这种关系。
下面为建表语句：
-- 城市表 CREATE TABLE cities ( name varchar(100) PRIMARY KEY, -- 名称 population float8, -- 人口，单位为百万 elevation int, -- 平均海拔，单位为米 province varchar(100) -- 省份 ); -- 省会表 CREATE TABLE capitals () INHERITS (cities); 上面的capitals表继承了cities表的所有列。</description></item><item><title>尝试在 Java 中使用 Moshi JSON 库</title><link>https://olzhy.github.io/posts/try-using-moshi-json-library-in-java.html</link><pubDate>Sat, 14 Oct 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/try-using-moshi-json-library-in-java.html</guid><description>Moshi 是一个可用于 Java 与 Kotlin 的 JSON 序列化与反序列化库，其主要使用 Kotlin 编写。本文以样例代码的方式来演示该库在 Java 中的使用。</description></item><item><title>在 VS Code 中使用 REST Client 扩展做 API 测试</title><link>https://olzhy.github.io/posts/getting-started-with-vscode-extension-rest-client.html</link><pubDate>Thu, 05 Oct 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/getting-started-with-vscode-extension-rest-client.html</guid><description>VS Code 中有一个非常易用的、用于 API 测试的扩展，名为 REST Client。可以在 VS Code 中使用该扩展来发送 HTTP 请求及接收响应，其语法比 cURL 命令更简单，是我们开发人员在测试 API 时的一个不错的选择。</description></item><item><title>如何使用 Kotlin Web 框架 Ktor 构建 RESTful API 服务？</title><link>https://olzhy.github.io/posts/building-restful-api-with-ktor.html</link><pubDate>Fri, 29 Sep 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/building-restful-api-with-ktor.html</guid><description>前面两篇文章「如何使用 Spring Boot 和 Kotlin 构建 RESTful API 服务？」、「如何使用 Kotlin HTTP 工具包 http4k 构建 RESTful API 服务？」分别介绍了 Kotlin 使用 Spring Boot，以及 Kotlin 使用 http4k 开发 RESTful API 的方法。本文则关注如何使用 Kotlin 官方主推的 Web 框架 Ktor 来开发 RESTful API？</description></item><item><title>如何使用 Kotlin HTTP 工具包 http4k 构建 RESTful API 服务？</title><link>https://olzhy.github.io/posts/building-restful-api-with-http4k.html</link><pubDate>Sat, 23 Sep 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/building-restful-api-with-http4k.html</guid><description>上文「如何使用 Spring Boot 和 Kotlin 构建 RESTful API 服务？」介绍了 Kotlin 可以无缝借用现有 Java Web 框架来开发 API 服务。除此之外，还有一些 Web 工具包是直接使用 Kotlin 开发的，如 Ktor、http4k 等，用这些原生 Kotlin 工具包开发 API 服务则可以充分使用 Kotlin 的语法和函数式编程的特性。本文即专门探索一下如何使用 http4k 来开发 RESTful API 服务。</description></item><item><title>如何使用 Spring Boot 和 Kotlin 构建 RESTful API 服务？</title><link>https://olzhy.github.io/posts/building-restful-api-with-spring-boot-and-kotlin.html</link><pubDate>Tue, 12 Sep 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/building-restful-api-with-spring-boot-and-kotlin.html</guid><description>本文将探索「如何使用 Spring Boot 和 Kotlin 构建 RESTful API 服务？」。本文将以搭建一个真实项目的方式来演示使用 Kotlin 构建 RESTful API 服务的整个过程，除了整体框架采用 Spring Boot 外，该项目的依赖管理采用的是 Gradle、数据库访问采用的是 MyBatis，数据库使用的是本地搭建的 MySQL。</description></item><item><title>Java 数据库操作工具包 jOOQ 初探</title><link>https://olzhy.github.io/posts/jooq-getting-started.html</link><pubDate>Tue, 05 Sep 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/jooq-getting-started.html</guid><description>jOOQ 是一个轻量级的 Java ORM（对象关系映射）框架，可用来构建复杂的 SQL 查询。jOOQ 可以根据数据库表自动生成对应的 Java 类，且字段类型与数据库一一对应，减少了 SQL 注入的风险。</description></item><item><title>对比 Java 学习 Kotlin 中的惯用写法与最佳实践</title><link>https://olzhy.github.io/posts/kotlin-idioms-and-best-practices.html</link><pubDate>Tue, 15 Aug 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/kotlin-idioms-and-best-practices.html</guid><description>本文将会以对比 Java 的方式来学习 Kotlin 中的一些惯用写法与最佳实践，以便对 Java 转 Kotlin 的同学能有一些帮助。</description></item><item><title>Java 并发编程基础</title><link>https://olzhy.github.io/posts/concurrent-programming-with-java.html</link><pubDate>Wed, 07 Jun 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/concurrent-programming-with-java.html</guid><description>本文关注 Java 并发编程基础，介绍并发的基本概念、进程和线程的概念、Java 多线程的初步使用、共享资源访问控制等基础知识。
开始探索 Java 并发编程之前，我们需要知道：什么是并发？以及，并发与并行有什么不同？</description></item><item><title>如何使用 Spring Boot 构建一个 RESTful Web 服务</title><link>https://olzhy.github.io/posts/building-a-restful-web-service-with-spring-boot.html</link><pubDate>Sun, 04 Jun 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/building-a-restful-web-service-with-spring-boot.html</guid><description>上文「如何快速搭建一个 Spring Boot 项目」介绍了使用 Spring Initializr 搭建 Spring Boot 模板项目的方法。本文接着介绍如何使用 Spring Boot 构建一个 RESTful Web 服务，主要关注项目的结构、注解的使用和单元测试代码的编写，并由此探索 Spring Boot 的设计理念与使用方法。</description></item><item><title>如何快速搭建一个 Spring Boot 项目</title><link>https://olzhy.github.io/posts/spring-boot-quick-start.html</link><pubDate>Sat, 03 Jun 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/spring-boot-quick-start.html</guid><description>Spring Boot 可以用最少的配置来快速创建一个独立的、生产级的 Spring 应用程序。</description></item><item><title>使用 Docker 构建安全镜像的几个最佳实践</title><link>https://olzhy.github.io/posts/docker-security-best-practices.html</link><pubDate>Mon, 29 May 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/docker-security-best-practices.html</guid><description>前两篇文章「Docker 初探」与「使用 Docker 的几个最佳实践」分别介绍了 Docker 的基本概念与使用方法，以及 Docker 在基础使用上的几个最佳实践。本文接着介绍一下 Docker 在构建安全镜像上的几个最佳实践。</description></item><item><title>使用 Docker 的几个最佳实践</title><link>https://olzhy.github.io/posts/docker-development-best-practices.html</link><pubDate>Sun, 28 May 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/docker-development-best-practices.html</guid><description>上文「Docker 初探」介绍了 Docker 的基本概念与使用方法，本文接着介绍使用 Docker 的几个最佳实践。</description></item><item><title>Docker 初探</title><link>https://olzhy.github.io/posts/docker-getting-started.html</link><pubDate>Sun, 21 May 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/docker-getting-started.html</guid><description>上文「一文了解什么是容器」介绍了容器的基本概念，本文接着介绍当前最流行的容器平台 Docker，并对其进行初步使用。
1 Docker 概览 Docker 是一个用于开发、发布和运行应用程序的开放容器平台。Docker 能够将应用程序与基础架构分离，以便快速交付软件。使用 Docker，我们可以像管理应用程序一样管理基础架构。通过利用 Docker 快速发布、测试与部署代码的方法，我们能够显著提升编写代码与在生产环境运行代码的效率。</description></item><item><title>一文了解什么是容器</title><link>https://olzhy.github.io/posts/what-is-a-container.html</link><pubDate>Wed, 17 May 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/what-is-a-container.html</guid><description>正如运输行业使用集装箱作为标准单元来包装货物以快速装卸与运输一样，软件行业也在越来越多的使用容器作为标准单元来打包应用程序以简化应用程序的迁移。
（现实生活中的集装箱 - 引用自 Ridge Cloud） 所以容器到底是什么呢？容器就是一个将软件代码和其所有依赖项打包在一起的标准单元。使用容器后，运行在一个计算环境的应用程序，可以快速可靠的运行在另一个计算环境上。</description></item></channel></rss>