<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>计算机 on 磊磊落落</title><link>https://olzhy.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/</link><description>Recent content in 计算机 on 磊磊落落</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>leileiluoluo@leileiluoluo.com (磊磊落落)</managingEditor><webMaster>leileiluoluo@leileiluoluo.com (磊磊落落)</webMaster><lastBuildDate>Wed, 07 Jun 2023 08:00:00 +0800</lastBuildDate><atom:link href="https://olzhy.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/index.xml" rel="self" type="application/rss+xml"/><item><title>Java 并发编程概览</title><link>https://olzhy.github.io/posts/concurrent-programming-with-java.html</link><pubDate>Wed, 07 Jun 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/concurrent-programming-with-java.html</guid><description>开始探索 Java 并发编程之前，我们需要知道：什么是并发？以及，并发与并行有什么不同？
1 什么是并发？并发与并行有什么不同？ 并发（Concurrency）指的是在一个重叠的时间段内执行多个任务。即一个任务可以在前一个任务未完成时开始执行，CPU 会对每个任务分配时间片并切换上下文，但同一时刻依然最多只有一个任务在执行。</description></item><item><title>如何使用 Spring Boot 构建一个 RESTful Web 服务</title><link>https://olzhy.github.io/posts/building-a-restful-web-service-with-spring-boot.html</link><pubDate>Sun, 04 Jun 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/building-a-restful-web-service-with-spring-boot.html</guid><description>上文「如何快速搭建一个 Spring Boot 项目」介绍了使用 Spring Initializr 搭建 Spring Boot 模板项目的方法。本文接着介绍如何使用 Spring Boot 构建一个 RESTful Web 服务，主要关注项目的结构、注解的使用和单元测试代码的编写，并由此探索 Spring Boot 的设计理念与使用方法。</description></item><item><title>如何快速搭建一个 Spring Boot 项目</title><link>https://olzhy.github.io/posts/spring-boot-quick-start.html</link><pubDate>Sat, 03 Jun 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/spring-boot-quick-start.html</guid><description>Spring Boot 可以用最少的配置来快速创建一个独立的、生产级的 Spring 应用程序。</description></item><item><title>使用 Docker 构建安全镜像的几个最佳实践</title><link>https://olzhy.github.io/posts/docker-security-best-practices.html</link><pubDate>Mon, 29 May 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/docker-security-best-practices.html</guid><description>前两篇文章「Docker 初探」与「使用 Docker 的几个最佳实践」分别介绍了 Docker 的基本概念与使用方法，以及 Docker 在基础使用上的几个最佳实践。本文接着介绍一下 Docker 在构建安全镜像上的几个最佳实践。</description></item><item><title>使用 Docker 的几个最佳实践</title><link>https://olzhy.github.io/posts/docker-development-best-practices.html</link><pubDate>Sun, 28 May 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/docker-development-best-practices.html</guid><description>上文「Docker 初探」介绍了 Docker 的基本概念与使用方法，本文接着介绍使用 Docker 的几个最佳实践。</description></item><item><title>Docker 初探</title><link>https://olzhy.github.io/posts/docker-getting-started.html</link><pubDate>Sun, 21 May 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/docker-getting-started.html</guid><description>上文「一文了解什么是容器」介绍了容器的基本概念，本文接着介绍当前最流行的容器平台 Docker，并对其进行初步使用。
1 Docker 概览 Docker 是一个用于开发、发布和运行应用程序的开放容器平台。Docker 能够将应用程序与基础架构分离，以便快速交付软件。使用 Docker，我们可以像管理应用程序一样管理基础架构。通过利用 Docker 快速发布、测试与部署代码的方法，我们能够显著提升编写代码与在生产环境运行代码的效率。</description></item><item><title>一文了解什么是容器</title><link>https://olzhy.github.io/posts/what-is-a-container.html</link><pubDate>Wed, 17 May 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/what-is-a-container.html</guid><description>正如运输行业使用集装箱作为标准单元来包装货物以快速装卸与运输一样，软件行业也在越来越多的使用容器作为标准单元来打包应用程序以简化应用程序的迁移。
（现实生活中的集装箱 - 引用自 Ridge Cloud） 所以容器到底是什么呢？容器就是一个将软件代码和其所有依赖项打包在一起的标准单元。使用容器后，运行在一个计算环境的应用程序，可以快速可靠的运行在另一个计算环境上。</description></item><item><title>什么是 OWASP Top 10？</title><link>https://olzhy.github.io/posts/owasp-top-ten.html</link><pubDate>Mon, 15 May 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/owasp-top-ten.html</guid><description>OWASP（Open Worldwide Application Security Project，开放全球应用程序安全项目）是一个致力于提高软件安全性的非营利性组织，其提供 Web 应用程序安全领域的标准、工具和指导手册，被业界大量的企业作为权威来参考。</description></item><item><title>Selenium 自动化测试最佳实践</title><link>https://olzhy.github.io/posts/selenium-best-practices.html</link><pubDate>Wed, 10 May 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/selenium-best-practices.html</guid><description>前两篇文章「Selenium WebDriver 基础使用」和「Selenium WebDriver 高级特性使用」分别介绍了 Selenium WebDriver 的基础功能和高级功能的使用。这两篇文章更多的是从底层实现细节的角度去练习 Selenium WebDriver API 的使用。</description></item><item><title>Selenium WebDriver 高级特性使用</title><link>https://olzhy.github.io/posts/selenium-webdriver-advanced-features.html</link><pubDate>Mon, 24 Apr 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/selenium-webdriver-advanced-features.html</guid><description>上文「Selenium WebDriver 基础使用」介绍了 Selenium WebDriver 基础功能的使用；本文将接着介绍 Selenium WebDriver 高级特性的使用，涉及页面加载策略、等待策略、元素定位与操作、浏览器操作。</description></item><item><title>Selenium WebDriver 基础使用</title><link>https://olzhy.github.io/posts/selenium-webdriver.html</link><pubDate>Fri, 21 Apr 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/selenium-webdriver.html</guid><description>「Selenium」是一个支持 Web 浏览器自动化的开源项目，可使用其来模拟用户与浏览器的一系列交互行为。
本文分两个部分：首先会介绍一下 Selenium 的组成部分；接着会使用一个实际的例子介绍 WebDriver 如何使用。</description></item><item><title>MacOS 上 Minikube 的安装与使用</title><link>https://olzhy.github.io/posts/minikube-getting-started.html</link><pubDate>Mon, 27 Mar 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/minikube-getting-started.html</guid><description>Minikube 用于在本地搭建 Kubernetes 环境，为我们学习与实践 Kubernetes 提供了方便。</description></item><item><title>如何在 Flask 框架中使用 GitHub Auth 做授权登录？</title><link>https://olzhy.github.io/posts/how-to-use-github-auth-in-flask.html</link><pubDate>Fri, 17 Mar 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/how-to-use-github-auth-in-flask.html</guid><description>本文探讨如何在 Python Flask 框架中使用 GitHub Auth 做授权登录。即一个 Flask 应用，如何集成第三方的 GitHub 账号系统来做登录。</description></item><item><title>如何使用 Maven 搭建 Spring Boot 父子项目？</title><link>https://olzhy.github.io/posts/spring-boot-parent-child-projects-with-maven.html</link><pubDate>Sun, 12 Mar 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/spring-boot-parent-child-projects-with-maven.html</guid><description>本文探索如何使用 Maven 来搭建 Spring Boot 父子项目，方便我们在搭建 Spring Boot 微服务时作参考。</description></item><item><title>如何对现代大型机（Mainframe）做 DevOps？</title><link>https://olzhy.github.io/posts/devops-for-modern-mainframe.html</link><pubDate>Sun, 05 Mar 2023 08:00:00 +0800</pubDate><author>leileiluoluo@leileiluoluo.com (磊磊落落)</author><guid>https://olzhy.github.io/posts/devops-for-modern-mainframe.html</guid><description>尽管大型机（Mainframe）已服役约半个多世纪，但其在安全性、可靠性、一致性和性能上久经考验，依然承担着目前世界上多数银行、保险、通信公司以及政府系统中极其关键的部分。
目前，数字化转型正进行的如火如荼，似乎有种大型机要完全被取代的趋势。但因大型机系统非常的复杂，而改造又存在着极大的风险，所以在当下，短期内完全彻底的替代大型机等遗留系统是不现实的。
接下来几年的趋势是一种混合的解决方案：即大型机系统中能改造的部分会逐步进行现代化改造，而极难改造的部分也会借助现代化技术来为其提升效率。这些现代化技术中很重要的一个就是 DevOps，所以本文要探讨的即是如何为现代大型机做 DevOps？</description></item></channel></rss>