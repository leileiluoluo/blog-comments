<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>计算机 on 磊磊落落</title><link>https://olzhy.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/</link><description>Recent content in 计算机 on 磊磊落落</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 12 Mar 2024 08:00:00 +0800</lastBuildDate><atom:link href="https://olzhy.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/index.xml" rel="self" type="application/rss+xml"/><item><title>Java：为什么重写 equals 方法时必须同时重写 hashCode 方法？</title><link>https://olzhy.github.io/posts/always-override-hashcode-when-override-equals.html</link><pubDate>Tue, 12 Mar 2024 08:00:00 +0800</pubDate><guid>https://olzhy.github.io/posts/always-override-hashcode-when-override-equals.html</guid><description>我们知道，Java 中 Object 类是所有类的父类，hashCode 与 equals 均是 Object 类中定义的方法。</description></item><item><title>如何使用 Spring Data JPA 进行数据库访问？</title><link>https://olzhy.github.io/posts/spring-data-jpa.html</link><pubDate>Mon, 26 Feb 2024 08:00:00 +0800</pubDate><guid>https://olzhy.github.io/posts/spring-data-jpa.html</guid><description>JPA（Jakarta Persistence API）是一种基于 ORM（Object-Relational Mapping，对象关系映射）技术的 Java EE 规范，用于在 Java 应用程序和关系型数据库之间持久化、访问和管理数据。JPA 规范提供了一系列注解和 API 用于将 Java 对象映射到数据库表、定义实体之间的关系以及执行数据库操作，从而简化了 Java 应用程序数据持久化层的开发。</description></item><item><title>如何使用 Spring JDBC 进行数据库访问？</title><link>https://olzhy.github.io/posts/spring-jdbc.html</link><pubDate>Thu, 22 Feb 2024 08:00:00 +0800</pubDate><guid>https://olzhy.github.io/posts/spring-jdbc.html</guid><description>Spring JDBC 是 Spring 框架提供的一个基于 Java JDBC 之上的用于操作关系型数据库的模块，其提供对数据库连接的管理、数据库访问、SQL 执行结果获取、事务支持和异常处理等功能。本文首先对 Spring JDBC 的基础知识进行介绍，然后准备一下测试数据与示例工程，最后以示例代码的方式来演示 Spring JDBC 的使用。</description></item><item><title>Spring Boot 如何使用 Validation 包进行输入参数校验？</title><link>https://olzhy.github.io/posts/spring-boot-input-validation.html</link><pubDate>Mon, 08 Jan 2024 08:00:00 +0800</pubDate><guid>https://olzhy.github.io/posts/spring-boot-input-validation.html</guid><description>Spring Boot 自带的 spring-boot-starter-validation 包支持以标准注解的方式进行输入参数校验。spring-boot-starter-validation 包主要引用了 hibernate-validator 包，其参数校验功能就是 hibernate-validator 包所提供的。</description></item><item><title>如何使用 REST Assured 做 API 测试？</title><link>https://olzhy.github.io/posts/how-to-perform-api-testing-using-rest-assured.html</link><pubDate>Sat, 23 Dec 2023 08:00:00 +0800</pubDate><guid>https://olzhy.github.io/posts/how-to-perform-api-testing-using-rest-assured.html</guid><description>REST Assured 是一个用于测试 RESTful API 的 Java 类库，其提供一种简单又直观的 DSL（Domain-Specific Language，领域特定语言）来编写测试用例。REST Assured 支持常见的 HTTP 请求方法（如：GET、POST、PUT、DELETE、PATCH、OPTIONS 等），且可以很方便的与 TestNG、JUnit、Cucumber 等流行测试框架进行集成。</description></item><item><title>Java 中为什么要避免使用 Finalizer？</title><link>https://olzhy.github.io/posts/avoid-using-finalizers-in-java.html</link><pubDate>Wed, 06 Dec 2023 08:00:00 +0800</pubDate><guid>https://olzhy.github.io/posts/avoid-using-finalizers-in-java.html</guid><description>Java 中的 finalize() 方法是 Object 类自带的一个方法，因所有的类都继承自 Object，所以所有类都是 Object 的子类，我们在子类重写 finalize() 方法就可以说使用了 Finalizer，使用其的目的一般是希望做一些对象销毁前最终的资源释放操作。而上文「Java try-with-resources 特性详解」里边介绍过，针对需要释放的资源，可以通过实现 AutoClosable 接口以及结合使用 try-with-resources 特性来实现。而 Finalizer，一般仅用于原生资源（非 Java 对象，不受 JVM 管理，一般通过调用原生方法来实现对其的释放）的释放这一个场景，除此之外，都应当避免对其的使用。</description></item><item><title>Java 建造者模式（Builder Pattern）知多少？</title><link>https://olzhy.github.io/posts/java-builder-pattern.html</link><pubDate>Tue, 05 Dec 2023 08:00:00 +0800</pubDate><guid>https://olzhy.github.io/posts/java-builder-pattern.html</guid><description>因 Java 中没有命名参数的概念，当一个类的构造器可选参数太多的时候，代码可读性会变得很差。于是，建造者模式（Builder Pattern）应运而生。
本文首先举了一个真实的例子，引出构造器可选参数太多时应如何去处理的问题。然后，分析传统的伸缩式构造器模式与 JavaBeans 构造器模式在处理该问题时存在的不足；最后，引出了建造者模式，介绍了其设计思路与优点。</description></item><item><title>Java try-with-resources 特性详解</title><link>https://olzhy.github.io/posts/java-try-with-resources.html</link><pubDate>Thu, 30 Nov 2023 08:00:00 +0800</pubDate><guid>https://olzhy.github.io/posts/java-try-with-resources.html</guid><description>&lt;p>Java 7 中引入了 &lt;code>try-with-resources&lt;/code> 特性来保证资源使用完毕后，自动进行关闭。任何实现了 &lt;code>java.lang.AutoCloseable&lt;/code> 接口的类，都可以看作是资源，也都可以使用该特性。本文将详细介绍该特性的使用方法与注意事项。&lt;/p></description></item><item><title>PostgreSQL JDBC Driver 42.3.0 读取 BigDecimal 时发生抹 0 的 Bug</title><link>https://olzhy.github.io/posts/postgres-jdbc-driver-issue.html</link><pubDate>Fri, 17 Nov 2023 08:00:00 +0800</pubDate><guid>https://olzhy.github.io/posts/postgres-jdbc-driver-issue.html</guid><description>&lt;p>使用 Java 原生方式访问 PostgreSQL 数据库时，偶然发现 JDBC Driver 42.3.0 读取 BigDecimal 时发生小数点前的 0 全部被抹掉的 Bug，特记录于此。&lt;/p></description></item><item><title>Java 8：如何设计一个 Instant 与 String 互转的工具类？</title><link>https://olzhy.github.io/posts/java-instant-util.html</link><pubDate>Wed, 15 Nov 2023 08:00:00 +0800</pubDate><guid>https://olzhy.github.io/posts/java-instant-util.html</guid><description>本文首先将介绍在 Java 8 之前，传统的 Date 与 String 相互转换的工具类是怎么实现的；接着再探索在 Java 8 新引入 Instant 后，如何实现 Instant 与 String 的互转，以及新的工具类的实现。</description></item><item><title>PostgreSQL 数据定义相关知识总结</title><link>https://olzhy.github.io/posts/postgres-ddl.html</link><pubDate>Sun, 22 Oct 2023 08:00:00 +0800</pubDate><guid>https://olzhy.github.io/posts/postgres-ddl.html</guid><description>本文的大部分内容翻译整理自 PostgreSQL 官方文档，作学习及知识总结之用。
本文依据官方 PostgreSQL 16 文档介绍如何创建数据库结构以保存数据。在关系型数据库中，原始数据存储在表里，所以本文主要介绍如何建表、修改表，以及有哪些可用的特性以控制所存储的数据。</description></item><item><title>PostgreSQL 表分区使用详解</title><link>https://olzhy.github.io/posts/postgres-table-partitioning.html</link><pubDate>Sat, 21 Oct 2023 08:00:00 +0800</pubDate><guid>https://olzhy.github.io/posts/postgres-table-partitioning.html</guid><description>表分区指的是将逻辑上的一个大表分割为物理上的一个个小块，使用表分区可以带来性能上的提升与存储上的优化。PostgreSQL 支持基础的表分区功能。本文将依据官方 PostgreSQL 16 文档来介绍为什么使用表分区？以及表分区的具体使用方法。</description></item><item><title>PostgreSQL 表继承使用详解</title><link>https://olzhy.github.io/posts/postgres-table-inheritance.html</link><pubDate>Fri, 20 Oct 2023 08:00:00 +0800</pubDate><guid>https://olzhy.github.io/posts/postgres-table-inheritance.html</guid><description>继承是来自于面向对象数据库的概念，其为数据库设计带来了新的可能性。
先看一个例子：假定我们正在构建一个数据模型来存储所有的城市，而城市中有的是普通城市，有的是省会城市，如何进行表设计呢？继承特性就能很巧妙的表示这种关系。
下面为建表语句：
-- 城市表 CREATE TABLE cities ( name varchar(100) PRIMARY KEY, -- 名称 population float8, -- 人口，单位为百万 elevation int, -- 平均海拔，单位为米 province varchar(100) -- 省份 ); -- 省会表 CREATE TABLE capitals () INHERITS (cities); 上面的capitals表继承了cities表的所有列。</description></item><item><title>尝试在 Java 中使用 Moshi JSON 库</title><link>https://olzhy.github.io/posts/try-using-moshi-json-library-in-java.html</link><pubDate>Sat, 14 Oct 2023 08:00:00 +0800</pubDate><guid>https://olzhy.github.io/posts/try-using-moshi-json-library-in-java.html</guid><description>Moshi 是一个可用于 Java 与 Kotlin 的 JSON 序列化与反序列化库，其主要使用 Kotlin 编写。本文以样例代码的方式来演示该库在 Java 中的使用。</description></item><item><title>在 VS Code 中使用 REST Client 扩展做 API 测试</title><link>https://olzhy.github.io/posts/getting-started-with-vscode-extension-rest-client.html</link><pubDate>Thu, 05 Oct 2023 08:00:00 +0800</pubDate><guid>https://olzhy.github.io/posts/getting-started-with-vscode-extension-rest-client.html</guid><description>VS Code 中有一个非常易用的、用于 API 测试的扩展，名为 REST Client。可以在 VS Code 中使用该扩展来发送 HTTP 请求及接收响应，其语法比 cURL 命令更简单，是我们开发人员在测试 API 时的一个不错的选择。</description></item><item><title>如何使用 Kotlin Web 框架 Ktor 构建 RESTful API 服务？</title><link>https://olzhy.github.io/posts/building-restful-api-with-ktor.html</link><pubDate>Fri, 29 Sep 2023 08:00:00 +0800</pubDate><guid>https://olzhy.github.io/posts/building-restful-api-with-ktor.html</guid><description>前面两篇文章「如何使用 Spring Boot 和 Kotlin 构建 RESTful API 服务？」、「如何使用 Kotlin HTTP 工具包 http4k 构建 RESTful API 服务？」分别介绍了 Kotlin 使用 Spring Boot，以及 Kotlin 使用 http4k 开发 RESTful API 的方法。本文则关注如何使用 Kotlin 官方主推的 Web 框架 Ktor 来开发 RESTful API？</description></item><item><title>如何使用 Kotlin HTTP 工具包 http4k 构建 RESTful API 服务？</title><link>https://olzhy.github.io/posts/building-restful-api-with-http4k.html</link><pubDate>Sat, 23 Sep 2023 08:00:00 +0800</pubDate><guid>https://olzhy.github.io/posts/building-restful-api-with-http4k.html</guid><description>上文「如何使用 Spring Boot 和 Kotlin 构建 RESTful API 服务？」介绍了 Kotlin 可以无缝借用现有 Java Web 框架来开发 API 服务。除此之外，还有一些 Web 工具包是直接使用 Kotlin 开发的，如 Ktor、http4k 等，用这些原生 Kotlin 工具包开发 API 服务则可以充分使用 Kotlin 的语法和函数式编程的特性。本文即专门探索一下如何使用 http4k 来开发 RESTful API 服务。</description></item><item><title>如何使用 Spring Boot 和 Kotlin 构建 RESTful API 服务？</title><link>https://olzhy.github.io/posts/building-restful-api-with-spring-boot-and-kotlin.html</link><pubDate>Tue, 12 Sep 2023 08:00:00 +0800</pubDate><guid>https://olzhy.github.io/posts/building-restful-api-with-spring-boot-and-kotlin.html</guid><description>本文将探索「如何使用 Spring Boot 和 Kotlin 构建 RESTful API 服务？」。本文将以搭建一个真实项目的方式来演示使用 Kotlin 构建 RESTful API 服务的整个过程，除了整体框架采用 Spring Boot 外，该项目的依赖管理采用的是 Gradle、数据库访问采用的是 MyBatis，数据库使用的是本地搭建的 MySQL。</description></item><item><title>Java 数据库操作工具包 jOOQ 初探</title><link>https://olzhy.github.io/posts/jooq-getting-started.html</link><pubDate>Tue, 05 Sep 2023 08:00:00 +0800</pubDate><guid>https://olzhy.github.io/posts/jooq-getting-started.html</guid><description>jOOQ 是一个轻量级的 Java ORM（对象关系映射）框架，可用来构建复杂的 SQL 查询。jOOQ 可以根据数据库表自动生成对应的 Java 类，且字段类型与数据库一一对应，减少了 SQL 注入的风险。</description></item><item><title>对比 Java 学习 Kotlin 中的惯用写法与最佳实践</title><link>https://olzhy.github.io/posts/kotlin-idioms-and-best-practices.html</link><pubDate>Tue, 15 Aug 2023 08:00:00 +0800</pubDate><guid>https://olzhy.github.io/posts/kotlin-idioms-and-best-practices.html</guid><description>本文将会以对比 Java 的方式来学习 Kotlin 中的一些惯用写法与最佳实践，以便对 Java 转 Kotlin 的同学能有一些帮助。</description></item></channel></rss>